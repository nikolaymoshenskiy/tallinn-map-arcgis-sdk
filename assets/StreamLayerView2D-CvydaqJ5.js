import{v as s,y as o,fC as _,A as l,aW as u,s as m,fi as g,au as f,aM as d}from"./index-CpEBwgYb.js";import{n as v,r as S}from"./FeatureLayerView2D-BnOfhczp.js";import"./featureConversionUtils-CJYQdFhy.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./timeSupport-Ctgz6qqI.js";import"./timeUtils-Drtj-p7v.js";import"./tagSymbols-BPcGfZon.js";import"./highlightReasons-BWwK8Xmo.js";import"./LayerView-B6w9L9qi.js";import"./Container-BcF0t0Be.js";import"./definitions-Y_v3njP4.js";import"./enums-BlUEVwJR.js";import"./Texture-DRPvVVKX.js";import"./TechniqueInstance-DKbwDBt7.js";import"./UpdateTracking2D-Dunhz78E.js";import"./BindType-BmZEZMMh.js";import"./Util-Bvc0ctSI.js";import"./Program-Bw42lM0I.js";import"./LabelMetric-DBgjSCLj.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-r7-QpPxK.js";import"./TileContainer-qrGyg-bC.js";import"./WGLContainer-BVk_EOCF.js";import"./ProgramTemplate-Bg3i-DR6.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-yfX2u20R.js";import"./config-MDUrh2eL.js";import"./earcut-C1Q5KFdX.js";import"./CircularArray-CujHzHWW.js";import"./tileUtils-B7X19rIS.js";import"./CIMSymbolHelper-Dc62DEV1.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-DuCZhugw.js";import"./GeometryUtils-ZQdssNyK.js";import"./Rect-CUzevAry.js";import"./SDFHelper-UI0jGGDX.js";import"./floatRGBA-Du6eSb2_.js";import"./FeatureCommandQueue-DgKNXPxc.js";import"./constants-D5zmR9t2.js";import"./HighlightCounter-B_0I_j4U.js";import"./popupUtils-BRNhCijY.js";import"./RefreshableLayerView-BrCHqVK6.js";const C=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:_})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let n=class extends C(S){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),u(()=>this.layer.purgeOptions,()=>this._update()),u(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new m("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return f(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new m("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return v(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const h=d.fromJSON(y);return h.features.forEach(c=>{c.layer=this.layer,c.sourceLayer=this.layer}),h}),new d({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([l("esri.views.2d.layers.StreamLayerView2D")],n);const me=n;export{me as default};
